<sect1 id="zend.json.server">
    <title>Zend_Json_Server - JSON-RPC server</title>

    <para>
        <code>Zend_Json_Server</code> is a <ulink
            url="http://groups.google.com/group/json-rpc/">JSON-RPC</ulink>
        server implementation. It supports both the 
        <ulink url="http://json-rpc.org/wiki/specification">JSON-RPC
            version 1 specification</ulink> as well as the 
        <ulink url="http://groups.google.com/group/json-rpc/web/json-rpc-1-2-proposal">version 2 specification</ulink>; 
        additionally, it provides a PHP implemention of the 
        <ulink url="http://groups.google.com/group/json-schema/web/service-mapping-description-proposal">Service
            Mapping Description (SMD) specification</ulink> 
        for providing service metadata to service consumers.
    </para>

    <para>
        JSON-RPC is a lightweight Remote Procedure Call protocol that utilizes
        JSON for its messaging envelopes. This JSON-RPC implementation follows
        PHP's <ulink
            url="http://us.php.net/manual/en/function.soap-soapserver-construct.php">SoapServer</ulink>
        API. This means that in a typical situation, you will simply:
    </para>

    <itemizedlist>
        <listitem><para>Instantiate the server object</para></listitem>
        <listitem><para>Attach one or more functions and/or classes/objects to
                the server object</para></listitem>
        <listitem><para>handle() the request</para></listitem>
    </itemizedlist>

    <para>
        <code>Zend_Json_Server</code> utilizes <xref
            linkend="zend.server.reflection">Zend_Server_Reflection</xref> to
        perform reflection on any attached classes or functions, and uses that
        information to build both the SMD and enforce method call signatures. As
        such, it is imperative that any attached functions and/or class methods
        have full PHP docblocks documenting, minimally:
    </para>

    <itemizedlist>
        <listitem><para>All parameters and their expected variable types</para></listitem>
        <listitem><para>The return value variable type</para></listitem>
    </itemizedlist>

    <para>
        <code>Zend_Json_Server</code> listens for POST requests only at this
        time; fortunately, most JSON-RPC client implementations in the wild at
        the time of this writing will only POST requests as it is. This makes it
        simple to utilize the same server end point to both handle requests as
        well as to deliver the service SMD, as is shown in the next example.
    </para>

    <example id="zend.json.server.usage">
        <title>Zend_Json_Server Usage</title>

        <para>
            First, let's define a class we wish to expose via the JSON-RPC
            server. We'll call the class 'Calculator', and define methods for
            'add', 'subtract', 'multiply', and 'divide':
        </para>

        <programlisting role="php"><![CDATA[
/**
 * Calculator - sample class to expose via JSON-RPC
 */
class Calculator
{
    /**
     * Return sum of two variables
     * 
     * @param  int $x 
     * @param  int $y 
     * @return int
     */
    public function add($x, $y)
    {
        return $x + $y;
    }

    /**
     * Return difference of two variables
     * 
     * @param  int $x 
     * @param  int $y 
     * @return int
     */
    public function subtract($x, $y)
    {
        return $x - $y;
    }

    /**
     * Return product of two variables 
     * 
     * @param  int $x 
     * @param  int $y 
     * @return int
     */
    public function multiply($x, $y)
    {
        return $x * $y;
    }

    /**
     * Return the product of division of two variables
     * 
     * @param  int $x 
     * @param  int $y 
     * @return float
     */
    public function divide($x, $y)
    {
        return $x / $y;
    }
}
?>]]></programlisting>

        <para>
            Note that each method has a docblock with entries indicating each
            parameter and its type, as well as an entry for the return value.
            This is <emphasis>absolutely critical</emphasis> when utilizing
            <code>Zend_Json_Server</code> -- or any other server component in
            Zend Framework, for that matter.
        </para>

        <para>
            Now we'll create a script to handle the requests:
        </para>

        <programlisting role="php"><![CDATA[
$server = new Zend_Json_Server();

// Indicate what functionality is available:
$server->setClass('Calculator');

// Handle the request:
$server->handle();
?>]]></programlisting>

        <para>
            However, this will not address the issue of returning an SMD so that
            the JSON-RPC client can autodiscover methods. That can be
            accomplished by determining the HTTP request method, and then
            specifying some server metadata:
        </para>

        <programlisting role="php"><![CDATA[
$server = new Zend_Json_Server();
$server->setClass('Calculator');

if ('GET' == $_SERVER['REQUEST_METHOD']) {
    // Indicate the URL endpoint, and the JSON-RPC version used:
    $server->setTarget('/json-rpc.php')
           ->setEnvelope(Zend_Json_Server_Smd::ENV_JSONRPC_2);

    // Grab the SMD
    $smd = $server->getServiceMap();

    // Return the SMD to the client
    header('Content-Type: application/json');
    echo $smd;
    return;
}

$server->handle();
?>]]></programlisting>

        <para>
            If utilizing the JSON-RPC server with Dojo toolkit, you will also
            need to set a special compatibility flag to ensure that the two
            interoperate properly:
        </para>


        <programlisting role="php"><![CDATA[
$server = new Zend_Json_Server();
$server->setClass('Calculator');

if ('GET' == $_SERVER['REQUEST_METHOD']) {
    $server->setTarget('/json-rpc.php')
           ->setEnvelope(Zend_Json_Server_Smd::ENV_JSONRPC_2);
    $smd = $server->getServiceMap();

    // Set Dojo compatibility:
    $smd->setDojoCompatible(true);

    header('Content-Type: application/json');
    echo $smd;
    return;
}

$server->handle();
?>]]></programlisting>
    </example>

    <sect2 id="zend.json.server.details">
        <title>Advanced Details</title>

        <para>
            While most functionality for <code>Zend_Json_Server</code> is
            spelled out in <xref linkend="zend.json.server.usage" />, more
            advanced functionality is available.
        </para>

        <sect3 id="zend.json.server.details.zendjsonserver">
            <title>Zend_Json_Server</title>

            <para>
                <code>Zend_Json_Server</code> is the core class in the JSON-RPC
                offering; it handles all requests and returns the response
                payload. It has the following methods:
            </para>

            <itemizedlist>
                <listitem><para><code>addFunction($function)</code>: Specify a
                        userland function to attach to the server.</para></listitem>
                <listitem><para><code>setClass($class)</code>: Specify a class
                        or object to attach to the server; all public methods of
                        that item will be exposed as JSON-RPC methods.</para></listitem>
                <listitem><para><code>fault($fault = null, $code = 404, $data =
                        null)</code>: Create and return a
                        <code>Zend_Json_Server_Error</code> object.</para></listitem>
                <listitem><para><code>handle($request = false)</code>: Handle a
                        JSON-RPC request; optionally, pass a
                        <code>Zend_Json_Server_Request</code> object to utilize
                        (creates one by default).</para></listitem>
                <listitem><para><code>getFunctions()</code>: Return a list of
                        all attached methods.</para></listitem>
                <listitem><para><code>setRequest(Zend_Json_Server_Request
                        $request)</code>: Specify a request object for the
                        server to utilize.</para></listitem>
                <listitem><para><code>getRequest()</code>: Retrieve the request
                        object used by the server.</para></listitem>
                <listitem><para><code>setResponse(Zend_Json_Server_Response
                        $response)</code>: Set the response object for the
                        server to utilize.</para></listitem>
                <listitem><para><code>getResponse()</code>: Retrieve the
                        response object used by the server.</para></listitem>
                <listitem><para><code>setAutoEmitResponse($flag)</code>:
                        Indicate whether the server should automatically emit
                        the response and all headers; by default, this is
                        true.</para></listitem>
                <listitem><para><code>autoEmitResponse()</code>: Determine if
                        auto-emission of the response is enabled.</para></listitem>
                <listitem><para><code>getServiceMap()</code>: Retrieve the
                        service map description in the form of a
                        <code>Zend_Json_Server_Smd</code> object</para></listitem>
            </itemizedlist>
        </sect3>

        <sect3 id="zend.json.server.details.zendjsonserverrequest">
            <title>Zend_Json_Server_Request</title>

            <para>
                The JSON-RPC request environment is encapsulated in the
                <code>Zend_Json_Server_Request</code> object. This object allows
                you to set necessary portions of the JSON-RPC request, including
                the request ID, parameters, and JSON-RPC specification version.
                It has the ability to load itself via JSON or a set of options,
                and can render itself as JSON via the <code>toJson()</code>
                method.
            </para>

            <para>
                The request object has the following methods available:
            </para>

            <itemizedlist>
                <listitem><para><code>setOptions(array $options)</code>: Specify
                        object configuration. <code>$options</code> may contain
                        keys matching any 'set' method:
                        <code>setParams()</code>, <code>setMethod()</code>,
                        <code>setId()</code>, and
                        <code>setVersion()</code>.</para></listitem>
                <listitem><para><code>addParam($value, $key = null)</code>: Add
                        a parameter to use with the method call. Parameters can be
                        just the values, or can optionally include the parameter
                        name.</para></listitem>
                <listitem><para><code>addParams(array $params)</code>: Add
                        multiple parameters at once; proxies to
                        <code>addParam()</code></para></listitem>
                <listitem><para><code>setParams(array $params)</code>: Set all
                        parameters at once; overwrites any existing
                        parameters.</para></listitem>
                <listitem><para><code>getParam($index)</code>: Retrieve a
                        parameter by position or name.</para></listitem>
                <listitem><para><code>getParams()</code>: Retrieve all
                        parameters at once.</para></listitem>
                <listitem><para><code>setMethod($name)</code>: Set the method to
                        call.</para></listitem>
                <listitem><para><code>getMethod()</code>: Retrieve the method
                        that will be called.</para></listitem>
                <listitem><para><code>isMethodError()</code>: Determine whether
                        or not the request is malformed and would result in an
                        error.</para></listitem>
                <listitem><para><code>setId($name)</code>: Set the request
                        identifier (used by the client to match requests to
                        responses).</para></listitem>
                <listitem><para><code>getId()</code>: Retrieve the request
                        identifier.</para></listitem>
                <listitem><para><code>setVersion($version)</code>: Set the
                        JSON-RPC specification version the request conforms to.
                        May be either '1.0' or '2.0'.</para></listitem>
                <listitem><para><code>getVersion()</code>: Retrieve the JSON-RPC
                        specification version used by the
                        request.</para></listitem>
                <listitem><para><code>loadJson($json)</code>: Load the request
                        object from a JSON string.</para></listitem>
                <listitem><para><code>toJson()</code>: Render the request as
                        a JSON string.</para></listitem>
            </itemizedlist>

            <para>
                An HTTP specific version is available via
                <code>Zend_Json_Server_Request_Http</code>. This class will
                retrieve the request via <code>php://input</code>, and allows
                access to the raw JSON via the <code>getRawJson()</code> method.
            </para>
        </sect3>

        <sect3 id="zend.json.server.details.zendjsonserverresponse">
            <title>Zend_Json_Server_Response</title>

            <para>
                The JSON-RPC response payload is encapsulated in the
                <code>Zend_Json_Server_Response</code> object. This object allows
                you to set the return value of the request, whether or not the
                response is an error, the request identifier, the JSON-RPC
                specification version the response conforms to, and optionally
                the service map.
            </para>

            <para>
                The response object has the following methods available:
            </para>

            <itemizedlist>
                <listitem><para><code>setResult($value)</code>: Set the response
                    result.</para></listitem>
                <listitem><para><code>getResult()</code>: Retrieve the response
                    result.</para></listitem>
                <listitem><para><code>setError(Zend_Json_Server_Error
                    $error)</code>: Set an error object. If set, this will be
                    used as the response when serializing to JSON.</para></listitem>
                <listitem><para><code>getError()</code>: Retrieve the error
                    object, if any.</para></listitem>
                <listitem><para><code>isError()</code>: Whether or not the
                    response is an error response.</para></listitem>
                <listitem><para><code>setId($name)</code>: Set the request
                    identifier (so the client may match the response with
                    the original request).</para></listitem>
                <listitem><para><code>getId()</code>: Retrieve the request
                    identifier.</para></listitem>
                <listitem><para><code>setVersion($version)</code>: Set the
                    JSON-RPC version the response conforms to.</para></listitem>
                <listitem><para><code>getVersion()</code>: Retrieve the JSON-RPC
                    version the response conforms to.</para></listitem>
                <listitem><para><code>toJson()</code>: Serialize the response to
                    JSON. If the response is an error response, serializes the
                    error object.</para></listitem>
                <listitem><para><code>setServiceMap($serviceMap)</code>: Set the
                    service map object for the response.</para></listitem>
                <listitem><para><code>getServiceMap()</code>: Retrieve the
                    service map object, if any.</para></listitem>
            </itemizedlist>

            <para>
                An HTTP specific version is available via
                <code>Zend_Json_Server_Response_Http</code>. This class will
                send the appropriate HTTP headers as well as serialize the
                response as JSON.
            </para>
        </sect3>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->
