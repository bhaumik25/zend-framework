<sect2 id="zend.dojo.view.dojo">
    <title>dojo() View Helper</title>

    <para>
        The <code>dojo()</code> view helper is intended to simplify setting up
        the Dojo environment, including the following responsibilities:
    </para>

    <itemizedlist>
        <listitem><para>Specifying either a CDN or a local path to a Dojo
                install.</para></listitem>
        <listitem><para>Specifying paths to custom Dojo modules.</para></listitem>
        <listitem><para>Specifying dojo.require statements.</para></listitem>
        <listitem><para>Specifying dijit stylesheet themes to use.</para></listitem>
        <listitem><para>Specifying dojo.addOnLoad() events.</para></listitem>
    </itemizedlist>

    <para>
        The <code>dojo()</code> view helper implementation is an example of a
        placeholder implementation; the data set in it persists between view
        objects, and may be directly echo'd from your layout script.
    </para>

    <example id="zend.dojo.view.dojo.usage">
        <title>dojo() View Helper Usage Example</title>

        <para>
            For this example, let's assume the developer will be using Dojo from
            a local path; will need to require several dijits; and will be
            utilizing the Tundra dijit theme.
        </para>

        <para>
            On many pages, the developer may not utilize Dojo at all. So, we
            will focus on a view script where Dojo is needed, and then on the
            layout script, where we will setup some of the Dojo environment and
            then render it.
        </para>

        <para>
            First, we need to tell our view object to use the Dojo view helper
            paths. This can be done in your bootstrap or an early-running
            plugin; simply grab your view object and execute the following:
        </para>

        <programlisting role="php"><![CDATA[
$view->addHelperPath('Zend/Dojo/View/Helper/', 'Zend_Dojo_View_Helper');
]]></programlisting>

        <para>
            Next, the view script. In this case, we're going to specify
            that we will be using a FilteringSelect -- which will consume a
            custom store based on QueryReadStore, which we'll call
            'PairedStore' and store in our 'custom' module.
        </para>

        <programlisting role="php"><![CDATA[
<? // setup data store for FilteringSelect ?>
<div dojoType="custom.PairedStore" jsId="stateStore"
    url="/data/autocomplete/type/state/format/ajax" 
    requestMethod="get"></div>

<? // Input element: ?>
State: <input id="state" dojoType="dijit.form.FilteringSelect" 
    store="stateStore" pageSize="5" />

<? // setup required dojo elements:
$this->dojo()->enable()
             ->setDjConfigOption('parseOnLoad', true)
             ->registerModulePath('../custom/')
             ->requireModule('dijit.form.FilteringSelect')
             ->requireModule('custom.PairedStore');
]]></programlisting>

        <para>
            In our layout script, we'll then check to see if Dojo is enabled,
            and, if so, we'll do some more general configuration and assemble
            it:
        </para>

        <programlisting role="php"><![CDATA[
<?= $this->doctype() ?>
<html>
<head>
    <?= $this->headTitle() ?> 
    <?= $this->headMeta() ?> 
    <?= $this->headLink() ?> 
    <?= $this->headStyle() ?> 
<? if ($this->dojo()->isEnabled()):
    $this->dojo()->setLocalPath('/js/dojo/dojo.js')
                 ->addStyleSheetModule('dijit.themes.tundra');
    echo $this->dojo();
?>
    <?= $this->headScript() ?> 
</head>
<body class="tundra">
    <?= $this->layout()->content ?>
    <?= $this->inlineScript() ?>
</body>
</html>
]]></programlisting>

        <para>
            At this point, you only need to ensure that your files are in the
            correct locations and that you've created the end point action for
            your FilteringSelect!
        </para>
    </example>

    <sect3 id="zend.dojo.view.dojo.methods">
        <title>Methods Available</title>

        <para>
            The <code>dojo()</code> view helper always returns an instance of
            the dojo placeholder container. That container object has the
            following methods available:
        </para>

        <itemizedlist>
            <listitem><para><code>setView(Zend_View_Interface $view)</code>: set
                    a view instance in the container.</para></listitem>
            <listitem><para><code>enable()</code>: explicitly enable Dojo
                    integration.</para></listitem>
            <listitem><para><code>disable()</code>: disable Dojo
                    integration.</para></listitem>
            <listitem><para><code>isEnabled()</code>: determine whether or not
                    Dojo integration is enabled.</para></listitem>
            <listitem><para><code>requireModule($module)</code>: setup a
                    <code>dojo.require</code> statement.</para></listitem>
            <listitem><para><code>getModules()</code>: determine what modules
                    have been required.</para></listitem>
            <listitem><para><code>registerModulePath($module, $path)</code>:
                    register a custom Dojo module path.</para></listitem>
            <listitem><para><code>getModulePaths()</code>: get list of
                    registered module paths.</para></listitem>
            <listitem><para><code>setCdnVersion($version = null)</code>: set
                    which version of Dojo to utilize from the CDN.</para></listitem>
            <listitem><para><code>getCdnVersion()</code>: retrieve what
                    version of Dojo from the CDN will be used.</para></listitem>
            <listitem><para><code>useCdn()</code></para>: tell the container to
                    utilize the CDN; implicitly enables integration.</listitem>
            <listitem><para><code>setLocalPath($path)</code>: tell the container
                    the path to a local Dojo install (should be a path relative
                    to the server, and contain the dojo.js file itself);
                    implicitly enables integration.</para></listitem>
            <listitem><para><code>getLocalPath()</code>: determine what local
                    path to Dojo is being used.</para></listitem>
            <listitem><para><code>useLocalPath()</code>: is the integration
                    utilizing a Dojo local path?</para></listitem>
            <listitem><para><code>setDjConfig(array $config)</code>: set
                    dojo/dijit configuration values (expects assoc
                    array).</para></listitem>
            <listitem><para><code>setDjConfigOption($option, $value)</code>: set
                    a single dojo/dijit configuration value.</para></listitem>
            <listitem><para><code>getDjConfig()</code>: get all dojo/dijit
                    configuration values.</para></listitem>
            <listitem><para><code>getDjConfigOption($option, $default =
                    null)</code>: get a single dojo/dijit configuration
                    value.</para></listitem>
            <listitem><para><code>addStylesheetModule($module)</code>: add a
                    stylesheet based on a module theme.</para></listitem>
            <listitem><para><code>getStylesheetModules()</code>: get stylesheets
                    registered as module themes.</para></listitem>
            <listitem><para><code>addStylesheet($path)</code>: add a local
                    stylesheet for use with Dojo.</para></listitem>
            <listitem><para><code>getStylesheets()</code>: get local Dojo
                    stylesheets.</para></listitem>
            <listitem><para><code>addOnLoad($spec, $function = null)</code>: add
                    a lambda for dojo.onLoad to call. If one argument is passed,
                    it is assumed to be either a function name or a javascript
                    closure. If two arguments are passed, the first is assumed
                    to be the name of an object instance variable and the second
                    either a method name in that object or a closure to utilize
                    with that object.</para></listitem>
            <listitem><para><code>getOnLoadActions()</code>: retrieve all
                    dojo.onLoad actions registered with the container. This will
                    be an array of arrays.</para></listitem>
            <listitem><para><code>onLoadCaptureStart($obj = null)</code>:
                    capture data to be used as a lambda for dojo.onLoad(). If
                    $obj is provided, the captured JS code will be considered a
                    closure to use with that Javascript object.</para></listitem>
            <listitem><para><code>onLoadCaptureStop($obj = null)</code>: finish
                    capturing data for use with dojo.onLoad().</para></listitem>
            <listitem><para><code>__toString()</code>: cast the container to a
                    string; renders all HTML style and script elements.</para></listitem>
        </itemizedlist>
    </sect3>
</sect2>
<!--
vim:se ts=4 sw=4 et:
-->
