<sect1 id="zend.feed.importing">
  <title>Importing Feeds with Zend_Feed</title>
    <sect2 id="zend.feed.distant.introduction">
      <title>Importing distant Feeds with Zend_Feed</title>
      <para>
        <code>Zend_Feed</code> enables developers to retrieve feeds very easily. If you know the URI of a
        feed, simply use the <code>Zend_Feed::import()</code> method:
      </para>
      <programlisting role="php"><![CDATA[
<?php

$feed = Zend_Feed::import('http://feeds.example.com/feedName');

?>]]></programlisting>
      <para>
        You can also use <code>Zend_Feed</code> to fetch the contents of a feed from a file or the contents
        of a PHP string variable:
      </para>
      <programlisting role="php"><![CDATA[
<?php

// importing a feed from a text file
$feedFromFile = Zend_Feed::importFile('feed.xml');

// importing a feed from a PHP string variable
$feedFromPHP = Zend_Feed::importString($feedString);

?>]]></programlisting>
      <para>
        In each of the examples above, an object of a class that extends <code>Zend_Feed_Abstract</code> is
        returned upon success, depending on the type of the feed. If an RSS feed were retrieved via one of
        the import methods above, then a <code>Zend_Feed_Rss</code> object would be returned. On the other
        hand, if an Atom feed were imported, then a <code>Zend_Feed_Atom</code> object is returned. The
        import methods will also throw a <code>Zend_Feed_Exception</code> object upon failure, such as an
        unreadable or malformed feed.
      </para>
    </sect2>
    <sect2 id="zend.feed.custom">
      <title>Importing custom Feeds with Zend_Feed</title>
      <para>
        <code>Zend_Feed</code> enables developers to create custom feeds very easily. You just have to create
        an array and to import it with Zend_Feed. This array can be imported with <code>Zend_Feed:importArray</code>
        or with <code>Zend_Feed:importBuilder</code>. In this last case the array will be computed on the fly
        by a custom data source implementing <code>Zend_Feed_Builder_Interface</code>
      </para>
      <sect3 id="zend.feed.custom.importarray">
        <title>Importing a custom array with Zend_Feed::importArray</title>
        <programlisting role="php"><![CDATA[
<?php
// importing a feed from an array
$atomFeedFromArray = Zend_Feed::importArray($array);
// equivalent to (by default a Zend_Feed_Atom instance is returned): 
$atomFeedFromArray = Zend_Feed::importArray($array, 'atom');

// importing a rss feed from an array
$rssFeedFromArray = Zend_Feed::importArray($array, 'rss');
?>]]></programlisting>
        <para>
          The format of the array must conform to this structure:
        </para>
        <programlisting role="php"><![CDATA[
<?php
array( 
      'title'       => 'title of the feed', //required
      'link'        => 'canonical url to the feed', //required
      'lastUpdate'  => 'timestamp of the update date', // optional
      'published'   => 'timestamp of the publication date', //optional
      'charset'     => 'charset of the textual data', // required
      'description' => 'short description of the feed', //optional
      'author'      => 'author/publisher of the feed', //optional
      'email'       => 'email of the author', //optional
      'webmaster'   => 'email address for person responsible for technical issues' // optional, ignored if atom is used
      'copyright'   => 'copyright notice', //optional
      'image'       => 'url to image', //optional
      'generator'   => 'generator', // optional
      'language'    => 'language the feed is written in', // optional
      'ttl'         => 'how long in minutes a feed can be cached before refreshing', // optional, ignored if atom is used
      'rating'      => 'The PICS rating for the channel.', // optional, ignored if atom is used
      'cloud'       => array(
                             'domain'            => 'domain of the cloud, e.g. rpc.sys.com' // required
                             'port'              => 'port to connect to' // optional, default to 80
                             'path'              => 'path of the cloud, e.g. /RPC2' //required
                             'registerProcedure' => 'procedure to call, e.g. myCloud.rssPleaseNotify' // required
                             'protocol'          => 'protocol to use, e.g. soap or xml-rpc' // required
                             ), // a cloud to be notified of updates // optional, ignored if atom is used
      'textInput'   => array(
                             'title'       => 'the label of the Submit button in the text input area' // required,
                             'description' => 'explains the text input area' // required
                             'name'        => 'the name of the text object in the text input area' // required
                             'link'        => 'the URL of the CGI script that processes text input requests' // required
                             ) // a text input box that can be displayed with the feed // optional, ignored if atom is used
      'skipHours'   => array(
                             'hour in 24 format', // e.g 13 (1pm)
                             // up to 24 rows whose value is a number between 0 and 23
                             ) // Hint telling aggregators which hours they can skip // optional, ignored if atom is used
      'skipDays '   => array(
                             'a day to skip', // e.g Monday
                             // up to 7 rows whose value is a Monday, Tuesday, Wednesday, Thursday, Friday, Saturday or Sunday
                             ) // Hint telling aggregators which days they can skip // optional, ignored if atom is used
      'itunes'      => array(
                             'author'       => 'Artist column' // optional, default to the main author value
                             'owner'        => array(
                                                     'name' => 'name of the owner' // optional, default to main author value
                                                     'email' => 'email of the owner' // optional, default to main email value
                                                     ) // Owner of the podcast // optional
                             'image'        => 'album/podcast art' // optional, default to the main image value
                             'subtitle'     => 'short description' // optional, default to the main description value
                             'summary'      => 'longer description' // optional, default to the main description value
                             'block'        => 'Prevent an episode from appearing (yes|no)' // optional
                             'category'     => array(
                                                     array('main' => 'main category', // required
                                                           'sub'  => 'sub category' // optional
                                                           ),
                                                     // up to 3 rows
                                                     ) // 'Category column and in iTunes Music Store Browse' // required
                             'explicit'     => 'parental advisory graphic (yes|no|clean)' // optional
                             'keywords'     => 'a comma separated list of 12 keywords maximum' // optional
                             'new-feed-url' => 'used to inform iTunes of new feed URL location' // optional
                             ) // Itunes extension data // optional, ignored if atom is used
      'entries'     => array(
                             array(
                                   'title'        => 'title of the feed entry', //required
                                   'link'         => 'url to a feed entry', //required
                                   'description'  => 'short version of a feed entry', // only text, no html, required
                                   'guid'         => 'id of the article, if not given link value will used', //optional
                                   'content'      => 'long version', // can contain html, optional
                                   'lastUpdate'   => 'timestamp of the publication date', // optional
                                   'comments'     => 'comments page of the feed entry', // optional
                                   'commentRss'   => 'the feed url of the associated comments', // optional
                                   'source'       => array(
                                                           'title' => 'title of the original source' // required,
                                                           'url' => 'url of the original source' // required
                                                           ) // original source of the feed entry // optional
                                   'category'     => array(
                                                           array(
                                                                 'term' => 'first category label' // required,
                                                                 'scheme' => 'url that identifies a categorization scheme' // optional
                                                                 ), 
                                                           array(
                                                                 //data for the second category and so on
                                                                 )
                                                           ) // list of the attached categories // optional
                                   'enclosure'    => array(
                                                           array(
                                                                 'url' => 'url of the linked enclosure' // required
                                                                 'type' => 'mime type of the enclosure' // optional
                                                                 'length' => 'length of the linked content in octets' // optional
                                                                 ),
                                                           array(
                                                                 //data for the second enclosure and so on
                                                                 )
                                                           ) // list of the enclosures of the feed entry // optional 
                                   ),
                             array(
                                   //data for the second entry and so on
                                   )
                             )
       );
?>]]></programlisting>
        <para>
          References:
          <itemizedlist>
            <listitem>
              <para>RSS 2.0 specification: <ulink url="http://blogs.law.harvard.edu/tech/rss">RSS 2.0</ulink></para>
            </listitem>
            <listitem>
              <para>Atom specification: <ulink url="http://tools.ietf.org/html/rfc4287">RFC 4287</ulink></para>
            </listitem>
            <listitem>
              <para>WFW specification: <ulink url="http://wellformedweb.org/news/wfw_namespace_elements">Well Formed Web</ulink></para>
            </listitem>
            <listitem>
              <para>iTunes specification: <ulink url="http://www.apple.com/itunes/store/podcaststechspecs.html">iTunes Technical Specifications</ulink></para>
            </listitem>
          </itemizedlist>
        </para>
      </sect3>
      <sect3 id="zend.feed.custom.importbuilder">
        <title>Importing a custom data source with Zend_Feed::importBuilder</title>
        <para>
          You can create a Zeed_Feed instance from any data source implementing the Zend_Feed_Builder_Interface interface.
          You just have to implement the method <code>Zend_Feed_Builder_Interface::getFeedData</code> to be able to use
          your object with <code>Zend_Feed::importBuilder</code>.
          As a simple reference implementation, your can use <code>Zend_Feed_Builder</code>, which takes an array
          in its constructor, performs some minor validation, and then can be used in the importBuilder() method.
        </para>
        <note>
          <code>Zend_Feed_Builder</code> serves as a concrete implementation to demonstrate the usage.
          Users are encouraged to make their own classes to implement Zend_Feed_Builder_Interface.
        </note>
        <para>
          Here is an example of Zend_Feed::importBuilder usage:
        </para>
        <programlisting role="php"><![CDATA[
<?php
// importing a feed from a custom builder source
$atomFeedFromArray = Zend_Feed::importBuilder(new Zend_Feed_Builder($array));
// equivalent to (by default a Zend_Feed_Atom instance is returned): 
$atomFeedFromArray = Zend_Feed::importArray(new Zend_Feed_Builder($array), 'atom');

// importing a rss feed from a custom builder array
$rssFeedFromArray = Zend_Feed::importArray(new Zend_Feed_Builder($array), 'rss');
?>]]></programlisting>
      </sect3>
      <sect3 id="zend.feed.custom.dump">
        <title>Dump the content of a Zend_Feed_Abstract instance</title>
        <para>
          To dump the content of a <code>Zend_Feed_Abstract</code> instance you may use
          <code>Zend_Feed_Abstract::send</code> or <code>Zend_Feed_Abstract::saveXml</code> functions:
        </para>
        <programlisting role="php"><![CDATA[
<?php
// dump the feed to standard output
print $feed->saveXML();

// send http headers and dump the feed
$feed->send();
?>]]></programlisting>
      </sect3>
    </sect2>
</sect1>
<!--
vim:se ts=4 sw=4 et:
-->